name: ci
# CI workflow for cuenv - optimized with comprehensive caching
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
env:
  CARGO_TERM_COLOR: always
  CUENV_ENV: ci
  RUST_BACKTRACE: 1
permissions:
  id-token: write
  contents: read
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v4
      - name: nix-install
        uses: DeterminateSystems/nix-installer-action@main
      - name: nix-build-and-check
        run: |
          nix build .#cuenv --print-build-logs
          nix flake check --print-build-logs -L
      - name: cue-validation
        run: |
          nix develop --command cue vet -c ./...
      - name: cuenv-test-all
        run: |
          nix develop --command cargo nextest run --profile ci --no-fail-fast --test-threads 16
      - name: cuenv-test-examples
        run: |
          # Use the binary from Nix build (already cached)
          mkdir -p target/debug
          cp result/bin/cuenv target/debug/

          # Run the example tests directly
          nix develop --command cargo test --test test_examples
  schema-compatibility:
    name: Test Schema Compatibility
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      - name: Test against published schema
        run: |
          # Build cuenv
          nix build .#cuenv
          mkdir -p target/debug
          cp result/bin/cuenv target/debug/
          nix develop --command cargo test --test test_examples
        continue-on-error: true
      - name: Report compatibility status
        if: failure()
        run: |
          echo "::warning::Schema compatibility test failed - this may indicate a breaking change"
  coverage:
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && (needs.test.result == 'success')
    steps:
      - uses: actions/checkout@v4
      - name: nix-install
        uses: DeterminateSystems/nix-installer-action@main
      - name: generate-coverage
        run: |
          # Use Nix cache - build will be instant if already cached
          nix build .#cuenv
          # Generate coverage report using cached dependencies with optimized parallelism
          nix develop --command cargo llvm-cov nextest --lcov --output-path lcov.info --profile coverage
      - name: upload-coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
